class TrieNode {
  constructor() {
    this.children = new Map();
    this.suggestions = [];
  }
}

class SearchSuggestionSystem {
  constructor(products) {
    this.root = new TrieNode();
    products.sort(); // Ensure lexicographical order
    for (const product of products) {
      this.insert(product);
    }
  }

  insert(product) {
    let node = this.root;
    for (const char of product) {
      if (!node.children.has(char)) {
        node.children.set(char, new TrieNode());
      }
      node = node.children.get(char);
      if (node.suggestions.length < 3) {
        node.suggestions.push(product);
      }
    }
  }

  getSuggestions(searchWord) {
    const result = [];
    let node = this.root;

    for (const char of searchWord) {
      if (node && node.children.has(char)) {
        node = node.children.get(char);
        result.push([...node.suggestions]);
      } else {
        // If at any point the prefix does not exist
        node = null;
        result.push([]);
      }
    }
    return result;
  }
}
